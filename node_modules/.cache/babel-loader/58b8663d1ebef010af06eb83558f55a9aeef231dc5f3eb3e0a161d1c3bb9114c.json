{"ast":null,"code":"import React,{useState,useEffect}from'react';import Card from'./Card';import'./Board.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Board(_ref){let{playerNames}=_ref;const[deck,setDeck]=useState([]);const[flipped,setFlipped]=useState([]);const[matched,setMatched]=useState([]);const[turn,setTurn]=useState(playerNames.player1);const[winner,setWinner]=useState(null);useEffect(()=>{const cardValues=['A','2','3','4','5','6','7','8','9','10','J','Q','K'];const cardColors=['red','black'];const initializeDeck=()=>{const newDeck=[];for(let value of cardValues){for(let color of cardColors){newDeck.push({id:\"\".concat(value,\"-\").concat(color),value,color});}}const shuffledDeck=shuffleDeck(newDeck.concat(newDeck));setDeck(shuffledDeck);};const shuffleDeck=deck=>{for(let i=deck.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[deck[i],deck[j]]=[deck[j],deck[i]];}return deck;};initializeDeck();},[]);const handleCardClick=id=>{setFlipped(flipped=>[...flipped,id]);};useEffect(()=>{if(flipped.length===2){const[firstCard,secondCard]=flipped;if(deck[firstCard].value===deck[secondCard].value){setMatched(matched=>[...matched,firstCard,secondCard]);}setTimeout(()=>setFlipped([]),1000);setTurn(turn=>turn===playerNames.player1?playerNames.player2:playerNames.player1);}},[flipped,deck,playerNames]);useEffect(()=>{if(matched.length===deck.length){setWinner(turn);}},[matched,deck,turn]);return/*#__PURE__*/_jsxs(\"div\",{className:\"board\",children:[deck.map((card,index)=>/*#__PURE__*/_jsx(Card,{id:index,value:card.value,color:card.color,isFlipped:flipped.includes(index)||matched.includes(index),handleClick:handleCardClick},index)),winner?/*#__PURE__*/_jsxs(\"p\",{className:\"game-over\",children:[\"Game Over! \",winner,\" is the winner!\"]}):/*#__PURE__*/_jsxs(\"p\",{children:[\"Current Turn: \",turn]})]});}export default Board;","map":{"version":3,"names":["React","useState","useEffect","Card","jsx","_jsx","jsxs","_jsxs","Board","_ref","playerNames","deck","setDeck","flipped","setFlipped","matched","setMatched","turn","setTurn","player1","winner","setWinner","cardValues","cardColors","initializeDeck","newDeck","value","color","push","id","concat","shuffledDeck","shuffleDeck","i","length","j","Math","floor","random","handleCardClick","firstCard","secondCard","setTimeout","player2","className","children","map","card","index","isFlipped","includes","handleClick"],"sources":["/home/oni/Specno/memory-game/src/Board.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport './Board.css';\n\nfunction Board({ playerNames }) {\n  const [deck, setDeck] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [matched, setMatched] = useState([]);\n  const [turn, setTurn] = useState(playerNames.player1);\n  const [winner, setWinner] = useState(null);\n\n  useEffect(() => {\n    const cardValues = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n    const cardColors = ['red', 'black'];\n\n    const initializeDeck = () => {\n      const newDeck = [];\n      for (let value of cardValues) {\n        for (let color of cardColors) {\n          newDeck.push({ id: `${value}-${color}`, value, color });\n        }\n      }\n      const shuffledDeck = shuffleDeck(newDeck.concat(newDeck));\n      setDeck(shuffledDeck);\n    };\n\n    const shuffleDeck = (deck) => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n      return deck;\n    };\n\n    initializeDeck();\n  }, []);\n\n  const handleCardClick = (id) => {\n    setFlipped((flipped) => [...flipped, id]);\n  };\n\n  useEffect(() => {\n    if (flipped.length === 2) {\n      const [firstCard, secondCard] = flipped;\n      if (deck[firstCard].value === deck[secondCard].value) {\n        setMatched((matched) => [...matched, firstCard, secondCard]);\n      }\n      setTimeout(() => setFlipped([]), 1000);\n      setTurn((turn) => (turn === playerNames.player1 ? playerNames.player2 : playerNames.player1));\n    }\n  }, [flipped, deck, playerNames]);\n\n  useEffect(() => {\n    if (matched.length === deck.length) {\n      setWinner(turn);\n    }\n  }, [matched, deck, turn]);\n\n  return (\n    <div className=\"board\">\n      {deck.map((card, index) => (\n        <Card\n          key={index}\n          id={index}\n          value={card.value}\n          color={card.color}\n          isFlipped={flipped.includes(index) || matched.includes(index)}\n          handleClick={handleCardClick}\n        />\n      ))}\n      {winner ? (\n        <p className=\"game-over\">Game Over! {winner} is the winner!</p>\n      ) : (\n        <p>Current Turn: {turn}</p>\n      )}\n    </div>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}