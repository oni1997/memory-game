{"ast":null,"code":"var _jsxFileName = \"/home/oni/Specno/Specno2/memory-game/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport './Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  playerNames\n}) {\n  _s();\n  const [deck, setDeck] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [matched, setMatched] = useState([]);\n  const [turn, setTurn] = useState(playerNames.player1);\n  const [winner, setWinner] = useState(null);\n  useEffect(() => {\n    const cardValues = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n    const cardColors = ['red', 'black'];\n    const initializeDeck = () => {\n      const newDeck = [];\n      for (let value of cardValues) {\n        for (let color of cardColors) {\n          newDeck.push({\n            id: `${value}-${color}`,\n            value,\n            color\n          });\n        }\n      }\n      newDeck.push({\n        id: `Joker-red`,\n        value: 'Joker',\n        color: 'red'\n      });\n      newDeck.push({\n        id: `Joker-black`,\n        value: 'Joker',\n        color: 'black'\n      });\n      const shuffledDeck = shuffleDeck(newDeck.concat(newDeck));\n      setDeck(shuffledDeck);\n    };\n    console.log(setDeck, count);\n    const shuffleDeck = deck => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n      return deck;\n    };\n    initializeDeck();\n  }, []);\n  const handleCardClick = id => {\n    setFlipped(flipped => [...flipped, id]);\n  };\n  useEffect(() => {\n    if (flipped.length === 2) {\n      const [firstCard, secondCard] = flipped;\n      if (deck[firstCard].value === deck[secondCard].value & deck[firstCard].color === deck[secondCard].color) {\n        setMatched(matched => [...matched, firstCard, secondCard]);\n      }\n      setTimeout(() => setFlipped([]), 1000);\n      setTurn(turn => turn === playerNames.player1 ? playerNames.player2 : playerNames.player1);\n    }\n  }, [flipped, deck, playerNames]);\n  useEffect(() => {\n    if (matched.length === deck.length) {\n      setWinner(turn);\n    }\n  }, [matched, deck, turn]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [deck.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n      id: index,\n      value: card.value,\n      color: card.color,\n      isFlipped: flipped.includes(index) || matched.includes(index),\n      handleClick: handleCardClick\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)), winner ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"game-over\",\n      children: [\"Game Over! \", winner, \" is the winner!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Turn: \", turn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"z4x2Xe1stmj9WKgTwssR73yKP+0=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","Card","jsxDEV","_jsxDEV","Board","playerNames","_s","deck","setDeck","flipped","setFlipped","matched","setMatched","turn","setTurn","player1","winner","setWinner","cardValues","cardColors","initializeDeck","newDeck","value","color","push","id","shuffledDeck","shuffleDeck","concat","console","log","count","i","length","j","Math","floor","random","handleCardClick","firstCard","secondCard","setTimeout","player2","className","children","map","card","index","isFlipped","includes","handleClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/oni/Specno/Specno2/memory-game/src/Board.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport './Board.css';\n\nfunction Board({ playerNames }) {\n  const [deck, setDeck] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [matched, setMatched] = useState([]);\n  const [turn, setTurn] = useState(playerNames.player1);\n  const [winner, setWinner] = useState(null);\n\n  useEffect(() => {\n    const cardValues = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n    const cardColors = ['red', 'black'];\n\n    const initializeDeck = () => {\n      const newDeck = [];\n      for (let value of cardValues) {\n        for (let color of cardColors) {\n          newDeck.push({ id: `${value}-${color}`, value, color });\n        }\n      }\n      newDeck.push({ id: `Joker-red`, value: 'Joker', color: 'red' });\n      newDeck.push({ id: `Joker-black`, value: 'Joker', color: 'black' });\n      const shuffledDeck = shuffleDeck(newDeck.concat(newDeck));\n      setDeck(shuffledDeck);\n    };\n    console.log(setDeck,count)\n\n    const shuffleDeck = (deck) => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n      return deck;\n    };\n\n    initializeDeck();\n  }, []);\n\n  const handleCardClick = (id) => {\n    setFlipped((flipped) => [...flipped, id]);\n  };\n\n  useEffect(() => {\n    if (flipped.length === 2) {\n      const [firstCard, secondCard] = flipped;\n      if (deck[firstCard].value === deck[secondCard].value & deck[firstCard].color === deck[secondCard].color ) {\n        setMatched((matched) => [...matched, firstCard, secondCard]);\n      }\n      setTimeout(() => setFlipped([]), 1000);\n      setTurn((turn) => (turn === playerNames.player1 ? playerNames.player2 : playerNames.player1));\n    }\n  }, [flipped, deck, playerNames]);\n\n  useEffect(() => {\n    if (matched.length === deck.length) {\n      setWinner(turn);\n    }\n  }, [matched, deck, turn]);\n\n  return (\n    <div className=\"board\">\n      {deck.map((card, index) => (\n        <Card\n          key={index}\n          id={index}\n          value={card.value}\n          color={card.color}\n          isFlipped={flipped.includes(index) || matched.includes(index)}\n          handleClick={handleCardClick}\n        />\n      ))}\n      {winner ? (\n        <p className=\"game-over\">Game Over! {winner} is the winner!</p>\n      ) : (\n        <p>Current Turn: {turn}</p>\n      )}\n    </div>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}